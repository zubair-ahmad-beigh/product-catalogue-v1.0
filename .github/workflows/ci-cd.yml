name: CI/CD Pipeline

on:
  push:
    branches: [ main, v1.0, v1.1, v2.0 ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: your-registry  # Change this to your Docker registry
  IMAGE_NAME: product-catalogue

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven
      run: mvn clean compile test
      
    - name: Run tests
      run: mvn test
      
    - name: Build JAR
      run: mvn package -DskipTests

  build-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-k8s:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml
        
    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig.yaml
        
        # Determine version from branch name
        if [[ "${{ github.ref }}" == "refs/heads/v1.0" ]]; then
          VERSION="1.0"
          NAMESPACE="v1"
        elif [[ "${{ github.ref }}" == "refs/heads/v1.1" ]]; then
          VERSION="1.1"
          NAMESPACE="v1-1"
        elif [[ "${{ github.ref }}" == "refs/heads/v2.0" ]]; then
          VERSION="2.0"
          NAMESPACE="v2"
        else
          echo "Unknown branch: ${{ github.ref }}"
          exit 1
        fi
        
        # Update image tag in deployment
        sed -i "s|your-registry/product-catalogue:.*|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" k8s/deployment-v${VERSION}.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace-v${VERSION}.yaml
        kubectl apply -f k8s/deployment-v${VERSION}.yaml
        kubectl apply -f k8s/service-v${VERSION}.yaml
        
        # Apply ingress if it doesn't exist
        kubectl apply -f k8s/ingress.yaml
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/product-catalogue-v${VERSION} -n ${NAMESPACE} --timeout=300s
        
        echo "Deployment completed for version ${VERSION}"

  security-scan:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 